
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

import org.opencv.core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;

/**
* Pipeline class.
*
* <P>Autogenerated pipeline from GRIP.
*
* <P>Make sure to set all sources using the setters before running processImage().
*
* <P>Tutorials and examples can be found online
*
* @author GRIP
*/
public class Pipeline{

	//This map links the Outputs with their names
	protected Map<String,Object> outputs;
	protected Map<String,Object> sources;

	/**
	 * This constructor sets up the pipeline
	 */
	public Pipeline(){
		outputs = new HashMap<String,Object>();
		sources = new HashMap<String,Object>();
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	protected void processImage(){
	    //Step0: CV dilate:
            //input
            Mat src = sources.get(source14);
            Mat kernel = org.bytedeco.javacpp.opencv_core$Mat[width=0,height=0,depth=8,channels=1];
            Point anchor = org.bytedeco.javacpp.opencv_core$Point[address=0x7fb490ce8c70,position=0,limit=1,capacity=1,deallocator=org.bytedeco.javacpp.Pointer$NativeDeallocator[ownerAddress=0x7fb490ce8c70,deallocatorAddress=0x12eaadb10]];
            double iterations = 1;
            int bordertype = Imgproc.BORDER_CONSTANT;
            Scalar bordervalue = (Infinity, Infinity, Infinity, Infinity);
            //output
            Mat output8 = new Mat();
            CV dilate(src, kernel, anchor, iterations, bordertype, bordervalue, output8);
            outputs.put("output8", output8);


	    //Step1: HSV Threshold:
	    //Operation not found
	                //input
            Mat input = sources.get(source15);
            double hueMin = 0.0;
            double hueMax =  180.0;
            double saturationMin = 0.0;
            double saturationMax =  255.0;
            double valueMin = 0.0;
            double valueMax =  255.0;
            //output
            Mat output9 = new Mat();
            operationNotFound(input, hue, saturation, value, output9);
            outputs.put("output9", output9);


	    //Step2: HSL Threshold:
	    //Operation not found
	                //input
            Mat input = output9;
            double hueMin = 0.0;
            double hueMax =  180.0;
            double saturationMin = 0.0;
            double saturationMax =  255.0;
            double luminanceMin = 0.0;
            double luminanceMax =  255.0;
            //output
            Mat output10 = new Mat();
            operationNotFound(input, hue, saturation, luminance, sources.get(source16));
            outputs.put("sources.get(source17)", sources.get(source17));


	    //Step3: HSV Threshold:
	    //Operation not found
	                //input
            Mat input = output8;
            double hueMin = 0.0;
            double hueMax =  180.0;
            double saturationMin = 0.0;
            double saturationMax =  255.0;
            double valueMin = 0.0;
            double valueMax =  255.0;
            //output
            Mat output11 = new Mat();
            operationNotFound(input, hue, saturation, value, sources.get(source18));
            outputs.put("sources.get(source19)", sources.get(source19));


	}
