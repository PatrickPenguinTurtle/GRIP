
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

import org.opencv.core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;

/**
* Pipeline class.
*
* <P>Autogenerated pipeline from GRIP.
*
* <P>Make sure to set all sources using the setters before running processImage().
*
* <P>Tutorials and examples can be found online
*
* @author GRIP
*/
public class Pipeline{

	//This map links the Outputs with their names
	protected Map<String,Object> outputs;
	protected Map<String,Object> sources;

	/**
	 * This constructor sets up the pipeline
	 */
	public Pipeline(){
		outputs = new HashMap<String,Object>();
		sources = new HashMap<String,Object>();
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	protected void processImage(){
	    //Step0: CV_dilate:
            //input
            Mat src0 = source0;
            Mat kernel0 = null;
            Point anchor0 = null;
            Double iterations0 = 1;
            Integer bordertype0 = imgproc.BORDER_CONSTANT;
            Scalar bordervalue0 = null;
            //output
            Mat output0 = new Mat();
            CV_dilate(src0, kernel0, anchor0, iterations0, bordertype0, bordervalue0, output0);
            outputs.put("output0", output0);


void CV_dilate(Mat src, Mat kernal, Point anchor, int iterations,int borderType, Scalar borderValue, Mat dst){
	if(kernal == null){
		kernal = new Mat();
	}
	if(anchor == null){
		anchor = new Point(-1,-1);
	}
	Impgroc.dilate(src, kernal, dst, anchor, iterations, borderType, borderValue);
}

	}
}
