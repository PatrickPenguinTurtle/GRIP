
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

import org.opencv.core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;

/**
* Pipeline class.
*
* <P>Autogenerated pipeline from GRIP.
*
* <P>Make sure to set all sources using the setters before running processImage().
*
* <P>Tutorials and examples can be found online
*
* @author GRIP
*/
public class Pipeline{

	//This map links the Outputs with their names
	protected Map<String,Object> outputs;
	protected Map<String,Object> sources;

	/**
	 * This constructor sets up the pipeline
	 */
	public Pipeline(){
		outputs = new HashMap<String,Object>();
		sources = new HashMap<String,Object>();
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	protected void processImage(){
	    //Step0: CV dilate:
            //input

            Mat src = source0;

            Mat kernel = org.bytedeco.javacpp.opencv_core$Mat[width=0,height=0,depth=8,channels=1];

            Point anchor = org.bytedeco.javacpp.opencv_core$Point[address=0x7fba83497b50,position=0,limit=1,capacity=1,deallocator=org.bytedeco.javacpp.Pointer$NativeDeallocator[ownerAddress=0x7fba83497b50,deallocatorAddress=0x125f69b10]];

            double iterations = 1;

            Integer bordertype = imgproc.BORDER_CONSTANT;

            Scalar bordervalue = (Infinity, Infinity, Infinity, Infinity);
            //output
            Mat output0 = new Mat();
            CV dilate();
            outputs.put("output0", output0);


	    //Step1: HSV Threshold:
	    //Operation not found
	                //input

            Mat input = output0;

            int[] hue = {[0.0, 180.0]};

            int[] saturation = {[0.0, 255.0]};

            int[] value = {[0.0, 255.0]};
            //output
            Mat output1 = new Mat();
            operationNotFound();
            outputs.put("output1", output1);


	    //Step2: HSL Threshold:
	    //Operation not found
	                //input

            Mat input = output1;

            int[] hue = {[0.0, 180.0]};

            int[] saturation = {[0.0, 255.0]};

            int[] luminance = {[0.0, 255.0]};
            //output
            Mat output2 = new Mat();
            operationNotFound();
            outputs.put("output2", output2);


	}
