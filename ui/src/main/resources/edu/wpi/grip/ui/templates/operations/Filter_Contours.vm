	/**
	 * Filters through contours.
	 * @param inputContours is the input list of contours
	 * @param output is the the output list of contours
	 * @param minArea is the minimum area of a contour that will be kept
	 * @param minPerimeter is the minimum perimeter of a contour that will be kept
	 * @param Width minimum and maximum width of a contour
	 * @param Height minimum height and maximum height
	 * @param minSolidity the minimum and maximum solidity of a contour
	 * @param minVertexCount minimum and maximum vertex Count of the contours
	 * @param minRatio minimum and maximum ratio of width to height
	 * @return returns a list of filtered contours
	 */
	public static void filterContours(List<MatOfPoint> inputContours, List<MatOfPoint> output,
	    double minArea, double minPerimeter, double[] width, double[] height, double[] solidity,
		double[] vertexCount, double[] ratio){
		final MatOfInt hull = new MatOfInt();
		//operation
		for (int i = 0; i < inputContours.size(); i++) {
			final MatOfPoint contour = inputContours.get(i);
		
			final Rect bb = Imgproc.boundingRect(contour);
			if (bb.width < width[0] || bb.width > width[1])
				continue;
			if (bb.height < height[0] || bb.height > height[1])
				continue;
			
			final double area = Imgproc.contourArea(contour);
			if (area < minArea)
				continue;
			if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter)
				continue;
			
			Imgproc.convexHull(contour, hull);
			MatOfPoint mopHull = new MatOfPoint();
			mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
			for (int j = 0; j < hull.size().height; j++) {
					int index = (int) hull.get(j, 0)[0];
				double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1] };
					mopHull.put(j, 0, point);
			}
			final double solid = 100 * area / Imgproc.contourArea(mopHull);
			if (solid < solidity[0] || solid > solidity[1]) continue;
			if (contour.rows() < vertexCount[0] || contour.rows() > vertexCount[1])	continue;
			final double rat = bb.width / bb.height;
			if (rat < ratio[0] || rat > ratio[1])	continue;
				output.add(contour);
		}
	}