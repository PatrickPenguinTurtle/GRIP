#**
This creates the complete java pipeline.
*#
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;

import org.opencv.core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;

/**
* Pipeline class.
*
* <P>Autogenerated pipeline from GRIP.
*
* <P>Make sure to set all sources using the setters before running processImage().
*
* <P>Tutorials and examples can be found online
*
* @author GRIP
*/
public class Pipeline{

	//This map links the Outputs with their names
	protected Map<String,Object> outputs;
	protected Map<String,Object> sources;

	/**
	 * This constructor sets up the pipeline
	 */
	public Pipeline(){
		outputs = new HashMap<String,Object>();
		sources = new HashMap<String,Object>();
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	protected void processImage(){
#set($count = 0)
#foreach($step in $pipeline.getSteps())
#set($c = $count)
	    //Step$count: $step.name():
#if($step.name().equals("CV dilate"))
#set($opName = "CV dilate")
#parse("src/main/resources/edu/wpi/grip/ui/templates/CV Step.vm")
#else
	    //Operation not found
	    #set($opName = "operationNotFound")
#parse("src/main/resources/edu/wpi/grip/ui/templates/CV Step.vm")
#end
#set($count = $count + 1)


#end
	}