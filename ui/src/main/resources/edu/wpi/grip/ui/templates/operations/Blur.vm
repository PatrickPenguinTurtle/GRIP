enum BlurType{
	BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"), BILATERAL_FILTER("Bilateral Filter");

	private final String label;

	BlurType(String label) {
		this.label = label;
	}

	public static BlurType get(String type){
	    if(BILATERAL_FILTER.label.equals(type)){
	        return BILATERAL_FILTER;
	    }
	    else if(GAUSSIAN.label.equals(type)){
	        return GAUSSIAN;
	    }
	    else if(MEDIAN.label.equals(type)){
        	return MEDIAN;
        }
        else{
        return BOX;
        }

	}

	@Override
	public String toString() {
		return this.label;
	}
}

void Blur(Mat input, BlurType type, double doubleRadius, Mat output){
    int radius = (int) doubleRadius;
	int kernalSize;
	switch(type){
 		case BOX:
 			kernalSize = 2*radius+1;
 			Imgproc.blur(input,output,new Size(kernalSize, kernalSize));
 			break;
		case GAUSSIAN:
			kernalSize = 6*radius +1;
			Imgproc.GaussianBlur(input,output, new Size(kernalSize, kernalSize),radius);
			break;
		case MEDIAN: 
			kernalSize = 2*radius +1;
			Imgproc.medianBlur(input,output,kernalSize);
			break;
		case BILATERAL_FILTER:
			Imgproc.bilateralFilter(input,output,-1,radius,radius);
			break;
	}
}
