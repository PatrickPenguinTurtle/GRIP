	/**
	 * Softens an image using one of several filters.
	 *
	 * @param input The image on which to perform the blur.
	 * @param type The blurType to perform.
	 * @param doubleRadius The radius for the blur.
	 * @param output The image in which to store the output.
	 */
	void $tMeth.name($step.name())(Mat *input, String *type, double *doubleRadius, Mat *output){
		int radius = (int) (*doubleRadius+0.5);
		int kernelSize;
		if(type->compare("Box Blur") == 0){
				kernelSize = 2*radius+1;
				blur(*input,*output,Size(kernelSize, kernelSize));
		}
		else if(type->compare("Gaussian Blur") == 0){
				kernelSize = 6*radius +1;
				GaussianBlur(*input,*output,Size(kernelSize, kernelSize),radius);
		}
		else if(type->compare("Median Filter") == 0){
				kernelSize = 2*radius +1;
				medianBlur(*input,*output,kernelSize);
		}
		else{
				bilateralFilter(*input,*output,-1,radius,radius);
		}
	}