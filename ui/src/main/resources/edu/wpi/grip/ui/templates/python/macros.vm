#macro( input $inp $c)
self.__$inp.name()$c#end


#macro( newInput $inp $c)
#if($inp.hasValue())
#if($inp.type().equals("BlurType") || $inp.type().equals("FlipCode"))
#input($inp $c) = ${inp.type()}.$inp.value().replaceAll(' ','_')#elseif($inp.type().equals("MaskSize"))
#input($inp $c) = $inp.value().substring(0,1)#elseif($inp.value().contains("source"))
#input($inp $c) = self.__$inp.value()#elseif ($inp.type().contains("Enum") || $input.type().contains("Type"))
#input($inp $c) = cv2.$inp.value()#elseif($inp.value().equals("null"))
#input($inp $c) = None#elseif($inp.value().equals("false"))
#input($inp $c) = False#elseif($inp.value().equals("true"))
#input($inp $c) = True#elseif ($inp.type().equals("List"))
#set($inputEndValue = $inp.value().length() - 1)
#input($inp $c) = [$inp.value().substring(1,$inputEndValue)];#elseif ($inp.type().equals("String"))
#input($inp $c) = "$inp.value()"
#else
#input($inp $c) = $inp.value()#end
#else##connected socket
#input($inp $c) = self.$inp.value()#end#end

#macro( needs $enum )
#set($BooleanThatDoesNotMatter = $enums.add($enum))#end

#macro( addToList $list $ele)
#set($BooleanThatDoesNotMatter = $list.add($ele))#end

#macro( type $socket )
#set($type = $socket.type())
#if($type.equals("Mat"))
numpy.ndarray#else
$type
#end
#end

#macro( setter $src )
    def set_${src.value()}(self, value):
        'Sets $src.value() to given value checking for correct type'
#if($src.type().equals("ContoursReport"))
        assert isinstance(value, list)
        for element in value:
            assert isinstance(element, numpy.ndarray)
#else
        assert isinstance(value, #type($src)) , "Source must be of type #type($src)"
#end
        self.__$src.value() = value
    
#end

#macro( output $out )
self.$out.name()#end