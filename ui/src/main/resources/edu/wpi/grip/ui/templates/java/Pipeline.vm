#**
This creates the complete java pipeline.
*##set($needsMut = false)
#set($interpolation = false)
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.HashMap;

import org.opencv.core.*;
import org.opencv.core.Core.*;
import org.opencv.features2d.FeatureDetector;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;

/**
* Pipeline class.
*
* <P>Autogenerated pipeline from GRIP.
*
* <P>Make sure to set all sources using the setters before running process().
*
* @author GRIP
*/
public class Pipeline{

	//This map links the Outputs with their names
	protected Map<String,Object> outputs;
#foreach($source in $pipeline.getSources())
	protected ${source.type()} $source.value();
#end
#foreach($moving in $pipeline.getMovingThresholds())
    protected Mat lastImageS$moving.num() = new Mat();
#end


	/**
	 * This constructor sets up the pipeline
	 */
	public Pipeline(){
		outputs = new HashMap<String,Object>();
	}

	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	public void process(){
#foreach($step in $pipeline.getSteps())
#set($c = "S" + $step.num())
		//Step$step.num(): $step.name():
#parse("src/main/resources/edu/wpi/grip/ui/templates/java/CV Step.vm")

#end
}
#foreach($source in $pipeline.getSources())
	/**
	 * This method is a generated setter for $source.value().
	 * @param source the $source.type() to set
	 */
	public void set${source.value()}(${source.type()} ${source.value()}){
		this.$source.value() = ${source.value()};
	}
#end
#foreach($step in $pipeline.getSteps())
#foreach($output in $step.getOutputs())
	/**
	 * This method is a generated getter for the output of a $step.name().
	 * @return ${output.baseType()} output from $step.name().
	 */
	public ${output.baseType()} get${output.name()}(){
#if( $output.mutable() ) #set($needsMut = true)
		return ((#MutOf(${output.type()})) outputs.get("${output.name()}")).get();
#else
		return (${output.type()}) outputs.get("${output.name()}");
#end
	}
#end
#end

#foreach($step in $pipeline.getUniqueSteps())
#set($toParse = "src/main/resources/edu/wpi/grip/ui/templates/java/operations/" + $step.name())
#set($toParse = $toParse + ".vm")
#parse($toParse)
#end
}
#if($needsMut)

#parse("src/main/resources/edu/wpi/grip/ui/templates/java/mutableof.vm")
#end