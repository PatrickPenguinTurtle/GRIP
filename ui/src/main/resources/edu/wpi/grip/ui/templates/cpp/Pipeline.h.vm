#set($lines = false)
#pragma once
\#include <opencv2/objdetect/objdetect.hpp>
\#include <opencv2/highgui/highgui.hpp>
\#include <opencv2/imgproc/imgproc.hpp>
\#include <opencv2/core/core.hpp>
\#include <opencv2/features2d.hpp>
\#include <iostream>
\#include <stdio.h>
\#include <stdlib.h>
using namespace cv;
using namespace std;
using namespace cv;

#foreach($step in $pipeline.getUniqueSteps())
#if($step.name() == "Find_Lines" || $step.name() == "Filter_Lines")
#parse("src/main/resources/edu/wpi/grip/ui/templates/cpp/operations/Lines.vm")

#end
#end
class $fileName{
	private:
#foreach( $source in $pipeline.getSources())
		#cType($source.type()) *$source.value();
#end
#foreach($step in $pipeline.getSteps())
#foreach($output in $step.getOutputs())
		#cType($output.type()) *$output.name();
#end
#end
#foreach($moving in $pipeline.getMovingThresholds())
		Mat *lastImageS$moving.num();
#end
#foreach($step in $pipeline.getUniqueSteps())
#set($toParse = "src/main/resources/edu/wpi/grip/ui/templates/cpp/operations/" + $step.name())
#set($toParse = $toParse + ".vm")
#parse($toParse)

#end

	public:
		$fileName();
		void Process();
#foreach($source in $pipeline.getSources())
		void #setter($source);
#end
#foreach( $step in $pipeline.getSteps() )
#foreach( $out in $step.getOutputs() )
		#cType($out.type())* get${out.name()}();
#end
#end
};

