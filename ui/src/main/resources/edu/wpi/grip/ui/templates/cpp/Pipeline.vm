\#include "${fileName}.h"
$fileName::$fileName() {
#foreach($source in $pipeline.getSources())
	this->$source.value() = new #cType($source.type())();
#end
#foreach($step in $pipeline.getSteps())
#set($boolNum = $velocityCount - 1)
#if($step.name() == "Switch" || $step.name() == "Valve")
#set($boolInp = $step.getInput(0))
#set($boolName = "$boolInp.name()S")
#if($boolInp.hasValue())
	this->$boolName$boolNum = $boolInp.value();
#end
#end
#end
#foreach($step in $pipeline.getSteps())
#foreach($output in $step.getOutputs())
	this->$output.name() = new #cType($output.type())();
#end
#end
#foreach($moving in $pipeline.getMovingThresholds())
	this->lastImageS$moving.num() = new Mat();
#end
#if(!$loadLib)
#foreach($source in $pipeline.getSources())
#set($num = $velocityCount - 1)
#if($source.type().equalsIgnoreCase("Mat"))
	matSources.insert(make_pair($num, (AbsPipeline::MatSource)&$fileName::set$source.value()));
#elseif($source.type().equalsIgnoreCase("Number") || $source.type().equalsIgnoreCase("double"))
	numSources.insert(make_pair($num, (AbsPipeline::NumSource)&$fileName::set$source.value()));
#end
#end
#set($outCnt = 0)
#foreach($step in $pipeline.getSteps())
#foreach($out in $step.getOutputs())
	outputs.insert(make_pair(string("$out.name().toLowerCase().replaceAll("_", "")"), (AbsPipeline::Output)&$fileName::get${out.name()}));
#set($outCnt = $outCnt + 1)
#end
#end
#foreach($step in $pipeline.getSteps())
#set($boolNum = $velocityCount - 1)
#if($step.name() == "Switch" || $step.name() == "Valve")
#set($boolInp = $step.getInput(0))
#set($boolName = "$boolInp.name()S")
#if($boolInp.hasValue())
	conditions.insert(make_pair("$step.name().toLowerCase()$step.num()", (AbsPipeline::Condition)&$fileName::set$step.name()$boolNum));
#end
#end
#end
#end
}

void $fileName::Process(){
#foreach($step in $pipeline.getSteps())
#set($c = "S" + $step.num())
	//Step$step.num(): $step.name():
#parse("src/main/resources/edu/wpi/grip/ui/templates/cpp/Step.vm")

#end
}

#foreach($source in $pipeline.getSources())
/**
 * This method is a generated setter for $source.value().
 * @param source the $source.type() to set
 */
void $fileName::set${source.value()}(#cType(${source.type()}) *${source.value()}){
#if($source.type().equals("Mat"))
	$source.value()->copyTo(*this->${source.value()});
#else
	this->$source.value() = ${source.value()};
#end
}
#end
#foreach($step in $pipeline.getSteps())
#set($boolNum = $velocityCount - 1)
#if($step.name() == "Switch" || $step.name() == "Valve")
#set($boolInp = $step.getInput(0))
#set($boolName = "$boolInp.name()S")
#if($boolInp.hasValue())
/**
 * This method is a generated setter for the condition of $step.name() $boolNum
 * @param the condition to set
 */
void $fileName::set$step.name()${boolNum}(bool value){
	$boolName$boolNum = value;
}
#end
#end
#end
#foreach($step in $pipeline.getSteps())
#foreach($output in $step.getOutputs())
/**
 * This method is a generated getter for the output of a $step.name().
 * @return ${output.baseType()} output from $step.name().
 */
#cType($output.type())* $fileName::get${output.name()}(){
	return this->${output.name()};
}
#end
#end
#if(!$loadLib)
extern "C" AbsPipeline * makePipeline(){
    return new ${fileName}();
}
#end